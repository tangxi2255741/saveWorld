<?xml version="1.0" encoding="utf-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration monitorInterval ="30">
    <appenders>
    <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
        <!--输出日志的格式-->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %level %X{UUID} [%t][%file:%l] - %msg%n"/>
        </console>
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!--<RollingFile name="RollingFileInfo" fileName="${instance.logs.path}/logs/info.log"-->
                     <!--filePattern="${patternLayout}">-->
        <!--&lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;-->
        <!--<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>-->
        <!--<PatternLayout pattern="${patternLayout}"/>-->
            <!--<Policies>-->
                <!--<SizeBasedTriggeringPolicy size="100 MB"/>-->
            <!--</Policies>-->
        <!--</RollingFile>-->
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!--name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.-->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>
        <logger name="org.thymeleaf" level="WARN"></logger>
        <!--Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.-->
        <!--如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置-->
        <!--Logger的additivity="false"只在自定义的Appender中进行输出。-->

        <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等-->
        <!--用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出-->
        <root level="INFO">
            <!--appender-ref:指定该日志输出到哪个Appender-->
            <appender-ref ref="Console"/>
        </root >
    </loggers>

</configuration>